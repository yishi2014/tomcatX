<?xml version="1.0" encoding="UTF-8"?>

<!-- status : 指定log4j本身的打印日志的级别.ALL< Trace < DEBUG < INFO < WARN < ERROR
    < FATAL < OFF。 monitorInterval : 用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s. -->
<Configuration status="INFO" monitorInterval="30">
    <Properties>
        <!-- 配置日志文件输出目录 ${sys:user.home} -->
        <Property name="LOG_HOME">logs/budget_log</Property>
        <property name="PATTERN_TEST">%d %highlight{%-5p} %X{user_code} [%c] %m%n</property>
        <!--<property name="PATTERN_TEST1">%d %highlight{%p} %style{%C{1.} [%t] %m}{bold,green}%n</property>-->
        <!--<property name="PATTERN_NORMAL">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%c] %-5level %logger{36} - %msg%n</property>-->
        <property name="PATTERN_NORMAL">%d %-5p %X{user_code} [%c] %m%n</property>
        <property name="PATTERN">${PATTERN_NORMAL}</property>
    </Properties>


    <Appenders>
        <!--这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout pattern="${PATTERN_TEST}"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
        <!--<File name="Console" fileName="${LOG_HOME}/rg.log" append="false">-->
        <!--<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>-->
        <!--</File>-->

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，
        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFileSystemOut" fileName="${LOG_HOME}/SystemOut.log" filePattern="${LOG_HOME}/$${date:yyyy-MM}/SystemOut-%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--<OnStartupTriggeringPolicy />-->
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
                <!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval，
                日期格式精确到哪一位，interval也精确到哪一个单位 -->
                <!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log-->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true"/>-->
                <!-- SizeBasedTriggeringPolicy:Policies子节点， 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. -->
                <SizeBasedTriggeringPolicy size="20 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>


        <RollingFile name="RollingFileSystemError" fileName="${LOG_HOME}/SystemErr.log" filePattern="${LOG_HOME}/$${date:yyyy-MM}/SystemErr-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--<OnStartupTriggeringPolicy />-->
                <!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log-->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true"/>-->
                <SizeBasedTriggeringPolicy size="20 MB" />
            </Policies>
        </RollingFile>

        <RollingFile name="RollingFileRequest" fileName="${LOG_HOME}/request.log" filePattern="${LOG_HOME}/$${date:yyyy-MM}/request-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${PATTERN}"/>
            <Policies>
                <!--<OnStartupTriggeringPolicy />-->
                <!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log-->
                <!--<TimeBasedTriggeringPolicy interval="1" modulate="true"/>-->
                <SizeBasedTriggeringPolicy size="20 MB" />
            </Policies>
        </RollingFile>

    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="info"></logger>
        <!-- 第三方日志系统 -->
        <!--<logger name="org.springframework.core" level="debug"/>-->
        <!--<logger name="org.springframework.beans" level="debug"/>-->
        <!--<logger name="org.springframework.context" level="debug"/>-->
        <!--<logger name="org.springframework.web" level="debug"/>-->
        <!--<logger name="org.jboss.netty" level="warn"/>-->
        <!--<logger name="org.apache.http" level="warn"/>-->
        <!--<logger name="org.hibernate" level="info"/>-->
        <logger name="org.hibernate.SQL" level="debug"/>
        <!--<logger name="org.hibernate.transaction" level="debug"/>-->
        <!--<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>-->
        <logger name="druid.sql" level="debug"/>
        <!--<logger name="com.alibaba.druid" level="info"/>-->

        <!--org.hibernate.SQL	记录执行时的所有SQL DML语句-->
        <!--org.hibernate.type	记录所有JDBC参数-->
        <!--org.hibernate.tool.hbm2ddl	记录执行时的所有SQL DDL语句-->
        <!--org.hibernate.pretty	在刷新时记录与会话关联的所有实体（最多20个实体）的状态-->
        <!--org.hibernate.cache	记录所有二级缓存活动-->
        <!--org.hibernate.transaction	记录事务相关活动-->
        <!--org.hibernate.jdbc	记录所有JDBC资源获取-->
        <!--org.hibernate.hql.internal.ast.AST	在查询解析期间记录HQL和SQL AST-->
        <!--org.hibernate.secure	记录所有JAAS授权请求-->
        <!--org.hibernate	记录一切。这是很多信息，但它对故障排除很有用-->

        <!--<logger name="org.mybatis" level="INFO"></logger>-->
        <!--<logger name="com.datanew.aop.AopLogger"></logger>-->
        <!-- 配置日志的根节点 -->
        <root level="debug">
            <appender-ref ref="Console"/>
            <!--<appender-ref ref="RollingFileSystemOut"/>-->
            <!--<appender-ref ref="RollingFileSystemError"/>-->
        </root>


    </Loggers>

</Configuration>