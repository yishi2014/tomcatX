<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type="text/xsl" href="jvmlayout.xsl"?>
<instruction>
    <symbol>
        <name>aaload</name>
        <desc>stack.push(arrayref[index])</desc>
        <hex>0x32</hex>
        <stack_before>...,arrayref,index</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>aastore</name>
        <desc>arrayref[index]=value</desc>
        <hex>0x53</hex>
        <stack_before>...,arrayref,index,value</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>aconst_null</name>
        <desc>stack.push(null)</desc>
        <hex>0x01</hex>
        <stack_before>...</stack_before>
        <stack_after>...,null</stack_after>
    </symbol>
    <symbol>
        <name>aload</name>
        <ins>
            aload
            index
        </ins>
        <desc>stack.push(local.get(index))</desc>
        <hex>0x19</hex>
        <stack_before>...</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>
    <symbol>
        <name>aload_0</name>
        <desc>stack.push(local.get(0))</desc>
        <hex>0x2a</hex>
        <stack_before>...</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>
    <symbol>
        <name>aload_1</name>
        <desc>stack.push(local.get(1))</desc>
        <hex>0x2b</hex>
        <stack_before>...</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>
    <symbol>
        <name>aload_2</name>
        <desc>stack.push(local.get(2))</desc>
        <hex>0x2c</hex>
        <stack_before>...</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>
    <symbol>
        <name>aload_3</name>
        <desc>stack.push(local.get(3))</desc>
        <hex>0x2d</hex>
        <stack_before>...</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>

    <symbol>
        <name>anewarray</name>
        <ins>
            anewarray
            indexbyte1
            indexbyte2
        </ins>
        <desc><![CDATA[
            stack.push(new(constpool.get(indexbyte1<<8|index2))[count])
        ]]>
        </desc>
        <hex>0xbd</hex>
        <stack_before>...,count</stack_before>
        <stack_after>...,arrayref</stack_after>
    </symbol>
    <symbol>
        <name>areturn</name>
        <desc>callerstack.push(stack.pop())</desc>
        <hex>0xb0</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>[empty]</stack_after>
    </symbol>
    <symbol>
        <name>arraylength</name>
        <desc>stack.push(arrayref.length)</desc>
        <hex>0xbe</hex>
        <stack_before>...,arrayref</stack_before>
        <stack_after>...,length</stack_after>
    </symbol>
    <symbol>
        <name>astore</name>
        <ins>
            astore
            index
        </ins>
        <desc>local.put(index,stack.pop())</desc>
        <hex>0x3a</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>astore_0</name>
        <desc>local.put(0,stack.pop())</desc>
        <hex>0x4b</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>astore_1</name>
        <desc>local.put(1,stack.pop())</desc>
        <hex>0x4c</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>astore_2</name>
        <desc>local.put(2,stack.pop())</desc>
        <hex>0x4d</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>astore_3</name>
        <desc>local.put(3,stack.pop())</desc>
        <hex>0x4e</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...</stack_after>
    </symbol>

    <symbol>
        <name>athrow</name>
        <desc>!</desc>
        <hex>0xbf</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>objectref</stack_after>
    </symbol>


    <symbol>
        <name>baload</name>
        <desc>stack.push((signed int)(byte|bool)(arrayref[index]))</desc>
        <hex>0x33</hex>
        <stack_before>...,arrayref,index</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>

    <symbol>
        <name>bastore</name>
        <desc>arrayref[index]=value</desc>
        <hex>0x54</hex>
        <stack_before>...,arrayref,index,value</stack_before>
        <stack_after>...</stack_after>
    </symbol>

    <symbol>
        <name>bipush</name>
        <ins>
            bipush
            byte
        </ins>
        <desc>stack.push((signed int) byte)</desc>
        <hex>0x10</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>

    <symbol>
        <name>caload</name>
        <desc>stack.push((unsigned int)(char)arrayref[index])</desc>
        <hex>0x34</hex>
        <stack_before>...,arrayref,index</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>

    <symbol>
        <name>castore</name>
        <desc>arrayref[index]=(char)value</desc>
        <hex>0x55</hex>
        <stack_before>...,arrayref,index,value</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>checkcast</name>
        <ins>
            checkcast
            indexbyte1
            indexbyte2
        </ins>
        <desc><![CDATA[
            objectref instanceof constpool.get((indexbyte1<<8)|indexbyte2)
        ]]></desc>
        <hex>0xc0</hex>
        <stack_before>...,objectref</stack_before>
        <stack_after>...,objectref</stack_after>
    </symbol>

    <symbol>
        <name>d2f</name>
        <desc>(float)stack.pop()</desc>
        <hex>0x90</hex>
        <stack_before>...,value</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>

    <symbol>
        <name>d2i</name>
        <desc>(int)stack.pop()</desc>
        <hex>0x8e</hex>
        <stack_before>...,value</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>d2l</name>
        <desc>(long)stack.pop()</desc>
        <hex>0x8f</hex>
        <stack_before>...,value</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>dadd</name>
        <desc>stack.pop()+stack.pop()</desc>
        <hex>0x63</hex>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>daload</name>
        <desc>stack.push(arrayref[index])</desc>
        <hex>0x31</hex>
        <stack_before>...,arrayref,index</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>dastore</name>
        <desc>arrayref[index]=(double)value</desc>
        <hex>0x52</hex>
        <stack_before>...,arrayref,index,value</stack_before>
        <stack_after>...</stack_after>
    </symbol>
    <symbol>
        <name>dcmpg</name>
        <hex>0x98</hex>
        <desc><![CDATA[
            stack.push((int)value1<value2)
        ]]></desc>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>dcmpl</name>
        <desc><![CDATA[
            stack.push((int)value1<value2)
        ]]></desc>
        <hex>0x97</hex>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>

    <symbol>
        <name>dconst_0</name>
        <desc>stack.push(0.0)</desc>
        <hex>0x0e</hex>
        <stack_before>...</stack_before>
        <stack_after>...,0.0</stack_after>
    </symbol>
    <symbol>
        <name>dconst_1</name>
        <desc>stack.push(1.0)</desc>
        <hex>0x0f</hex>
        <stack_before>...</stack_before>
        <stack_after>...,1.0</stack_after>
    </symbol>

    <symbol>
        <name>ddiv</name>
        <desc>(double)value1/(double)value2</desc>
        <hex>0x6f</hex>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>dload</name>
        <ins>
            dload
            index
        </ins>
        <desc>stack.push(local.getdouble(index))</desc>
        <hex>0x18</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>dload_0</name>
        <desc>stack.push(0.0)</desc>
        <hex>0x26</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>dload_1</name>
        <desc>stack.push(1.0)</desc>
        <hex>0x27</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>dload_2</name>
        <desc>stack.push(2.0)</desc>
        <hex>0x28</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>
    <symbol>
        <name>dload_3</name>
        <desc>stack.push(3.0)</desc>
        <hex>0x29</hex>
        <stack_before>...</stack_before>
        <stack_after>...,value</stack_after>
    </symbol>

    <symbol>
        <name>dmul</name>
        <desc>stack.push((double)value*(double)value2)</desc>
        <hex>0x6b</hex>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>

    <symbol>
        <name>dneg</name>
        <desc>stack.push(-value)</desc>
        <hex>0x77</hex>
        <stack_before>...,value</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>
    <symbol>
        <name>drem</name>
        <desc>stack.push(value%value2)</desc>
        <hex>0x73</hex>
        <stack_before>...,value1,value2</stack_before>
        <stack_after>...,result</stack_after>
    </symbol>




</instruction>